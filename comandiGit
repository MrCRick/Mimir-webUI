COMMIT:
vai sulla cartella dei file da committare e digita quanto segue:
-"git add --all"
-"git commit -m "commit che voglio scrivere""
-"git push -u origin master"

COMMIT DA ZERO:
tutto da terminale
-git config --global user.name "Daniele D'Amico"
-git config --global user.email "dan.damico1@stud.uniroma3.it"
-git clone <link_repository>
vai sulla cartella con i file interessati e digita quanto segue:
-git init
-git add --all
-git commit -m "Primo commit"
-git remote add origin <link_repository>
-git push -u origin master


PULL REPOSITORY E POI COMMIT:
-git pull link_repository
rifai i commit





COMANDI PER GIT: create git directory 
1 git init
2 git clone "link repository"

COMANDI PER GIT: push your files
1 git add --all
2 git commit -m "commit"
3 git push

COMANDI PER GIT: pull in your files
1 git pull "link directory"




from flask import Flask, redirect, url_for, abort, render_template, request
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, BooleanField
from wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError
from flask_admin import Admin
from flask_admin.contrib.sqla import ModelView
from flask_login import UserMixin, LoginManager, current_user, login_user, logout_user, login_required


app = Flask(__name__)
admin = Admin(app, name='Control Panel')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database/users.db'
app.config['SECRET_KEY'] = 'my_little_secret_key'
SQLALCHEMY_TRACK_MODIFICATIONS = False

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login = LoginManager(app)


@login.user_loader
def load_user(user_id):
	return User.query.get(user_id)



class User(db.Model, UserMixin):
	id = db.Column(db.Integer, primary_key=True)
	username = db.Column(db.String(30), unique=True, nullable=False)
	email = db.Column(db.String(30), index=True, unique=True, nullable=False)
	password = db.Column(db.String(30), nullable=False)
	enable = db.Column(db.Boolean(), index=True, default=False)
	is_admin = db.Column(db.Boolean(), index=True, default=False)



class Controller(ModelView):
	def is_accessible(self):
		if current_user.is_admin == True:
			return current_user.is_authenticated
		else:
			return abort(404)
		#return current_user.is_authenticated

	def not_auth(self):
		return redirect(url_for('home'))



class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=8, max=20)])
    email = StringField('Email Address', validators=[DataRequired(), Email()])
    password = PasswordField('New Password', validators=[DataRequired(), Length(min=6, max=20)])
    confirm = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Sign Up')


    def validate_username(self,username):
    	check_user = UserInfo.query.filter_by(username=username.data).first()
    	if check_user:
    		return ValidationError('Username already exist')


    def validate_email(self, email):
    	check_email = UserInfo.query.filter_by(email=email.data).first()
    	if check_email:
    		return ValidationError('Already have an account registered with this email address')



class LoginForm(FlaskForm):
	email = StringField('Email', validators=[DataRequired(), Email()])
	password = PasswordField('Password', validators=[DataRequired()])
	submit = SubmitField('Login')
    


admin.add_view(Controller(User,db.session))



@app.route('/')
@app.route('/home')
def index():
	return render_template("home.html", page_title="Home Page")


@app.route('/register')
def register():
	form = RegistrationForm()
	if form.validate_on_submit():
		password_hash = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
		user_data = UserInfo(username=form.username.data, email=form.email.data, password=password_hash)
		db.session.add(user_data)
		db.session.commit()
		return redirect(url_for('login'))
	return render_template('register.html', page_title="Register", form=form)



@app.route('/process', methods=['POST'])
def process():
	username = request.form['username']
	email = request.form['email']
	password = request.form['password']
	new_user = User(username=username, email=email, password=password)
	db.session.add(new_user)
	db.session.commit()
	return "Welcome, sign up complete!"



@app.route('/login', methods=['GET', 'POST'])
def login():
	form = LoginForm()
	if form.validate_on_submit():
		email = UserInfo.query.filter_by(email=form.email.data).first()
		validate_pass = bcrypt.check_password_hash(email.password, form.password.data)

		if email and validate_pass:
			flash('Login successful!')
			return redirect(url_for('home'))
		else:
			flash('Invalid credential')
			return redirect(url_for('register'))
	return render_template("login.html", page_title="Login", form=form)



@app.route('/profile')
def profile():
	return render_template('profile.html')



@app.route('/dashboard')
@login_required
def dashboard():
	return render_template('dashboard.html')



@app.route('/unprotect')
def unprotect():
	return "this page is unprotected"



@app.route('/table')
@login_required
def table():
	users = User.query.all()
	return render_template('table.html', users = users)



@app.route('/create_admin', methods=['GET', 'POST'])
def create_admin():
	if request.method == 'POST':
		new_user = User(email=request.form['email'], password=request.form['password'], is_admin=True)
		db.session.add(new_user)
		db.session.commit()
		return "You have create a new admin account"

	return render_template('admin_signup.html')


	
@app.route('/logout')
def logout():
	logout_user()
	return render_template('home.html')



if __name__ == '__main__':
	app.run(host="localhost", port="5000", debug=True)










	SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'app.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False